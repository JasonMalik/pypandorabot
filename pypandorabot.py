import urllib2
import urllib
import xmltodict

class MissingBot(Exception):
    """
    MissingBot exception class, if the bot is missing (wrong id) the server
    return status = 3
    """
    def __str__(self):
        return repr("The status has returned code 3, the bot is missing")

class Pandorabot:
    """
    Main class, used in order to comunicate with pandorabot server
    """
    PANDORABOTS_URL = "http://www.pandorabots.com/pandora/talk-xml"

    def __init__(self,bot_id,cust_id=None):
        """Create a pandorabot object
        Keyword arguments:
        bot_id -- the bot id provided by pandorabot
        cust_id -- the custom id used to keep track of a session (default None)
        """
        self.bot_id = bot_id
        self.cust_id = cust_id

    def talk(self,input):
        """Send a message to the bot and return the response
        Keyword arguments:
        input -- String message to send
        """
        input = self.toAscii(input)

        postData = urllib.urlencode({'botid': self.bot_id,'custid': self.cust_id, 'input': input} if self.cust_id else {'botid': self.bot_id,'input': input})

        request = urllib2.Request(self.PANDORABOTS_URL+'?'+postData)
        response = urllib2.urlopen(request)

        parsed = xmltodict.parse(response)

        if(parsed['result']['@status'] == '3'):
            raise MissingBot

        '''
        cust_id it's a parameter used like a session id, it's generated by the
        server and it's auto stored by the code,
        however if you want you can set it to None by calling the method reset()
        '''
        if(self.cust_id is None):
            self.cust_id = parsed['result']['@custid']

        return str(parsed['result']['that'])

    def getCustId(self):
        """
        Return custom id (the session id):
        """
        return self.cust_id

    def reset(self):
        """
        Reset the session, it's like starting a new chat with the same bot
        """
        self.cust_id = None

    @staticmethod
    def toAscii(string):
        """
        Remove non ascii character from a string, return a sanitized string
        non ascii character cannot be processe by pandorabots
        Keyword arguments:
        input -- String to sanitize
        """
        stripped = (c for c in string if 0 < ord(c) < 127)
        return ''.join(stripped)
